/**
 * Test for preserving actual newlines in commands
 */

console.log('üß™ Testing preservation of actual newlines in commands...\n');

// Simulate the new parseCommand function
function parseCommand(text) {
    const trimmedText = text.trim();
    const firstSpaceIndex = trimmedText.indexOf(' ');
    
    if (firstSpaceIndex === -1) {
        return { command: trimmedText.substring(1), args: [] };
    }
    
    const command = trimmedText.substring(1, firstSpaceIndex);
    const restOfText = trimmedText.substring(firstSpaceIndex + 1);
    
    const args = [restOfText.split(/\s+/)[0]];
    const remainingText = restOfText.substring(args[0].length).trimStart();
    
    if (remainingText) {
        args.push(remainingText);
    }
    
    return { command, args };
}

// Simulate the text processing logic
function processAddResponseCommand(commandText) {
    const { command, args } = parseCommand(commandText);
    
    if (args.length < 2) {
        return { error: 'Not enough arguments' };
    }
    
    const responseType = args[0];
    const restArgs = args[1];
    
    const parts = restArgs.split('|').map((p) => {
        return p.replace(/^\s+|\s+$/g, '');
    });
    
    if (parts.length < 2) {
        return { error: 'Need keywords and content' };
    }
    
    const keywords = parts[0].split(',').map(k => k.trim());
    const text = parts[1]; // Preserve newlines as-is
    
    return {
        success: true,
        command,
        responseType,
        keywords,
        text
    };
}

// Test cases with actual newlines (simulating WhatsApp message with line breaks)
const tests = [
    {
        name: 'Test 1: Multi-line text with actual newlines',
        input: `.ÿßÿ∂ÿßŸÅÿ©_ÿ±ÿØ ŸÜÿµ ŸÖŸàÿßÿπŸäÿØ | üìÖ ÿßŸÑŸÖŸàÿßÿπŸäÿØ:

‚úÖ ÿßŸÑÿ£ÿ≠ÿØ: 10 ÿµ
‚úÖ ÿßŸÑÿßÿ´ŸÜŸäŸÜ: 2 ŸÖ

‚ùå ÿßŸÑÿ¨ŸÖÿπÿ©: ŸÖÿ∫ŸÑŸÇ`,
        expectedText: `üìÖ ÿßŸÑŸÖŸàÿßÿπŸäÿØ:

‚úÖ ÿßŸÑÿ£ÿ≠ÿØ: 10 ÿµ
‚úÖ ÿßŸÑÿßÿ´ŸÜŸäŸÜ: 2 ŸÖ

‚ùå ÿßŸÑÿ¨ŸÖÿπÿ©: ŸÖÿ∫ŸÑŸÇ`
    },
    {
        name: 'Test 2: Assignment with actual newlines',
        input: `.ÿßÿ∂ÿßŸÅÿ©_ÿ±ÿØ ŸÜÿµ ÿßÿ≥ÿßŸäŸÖŸÜÿ™ | ‚úçÔ∏è Assignment:

üìù ÿ≠ŸÑ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ŸÖŸÜ 1 ÿ•ŸÑŸâ 10
üìÖ ÿ¢ÿÆÿ± ŸÖŸàÿπÿØ: ÿßŸÑÿ£ÿ≠ÿØ ÿßŸÑŸÇÿßÿØŸÖ`,
        expectedText: `‚úçÔ∏è Assignment:

üìù ÿ≠ŸÑ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ŸÖŸÜ 1 ÿ•ŸÑŸâ 10
üìÖ ÿ¢ÿÆÿ± ŸÖŸàÿπÿØ: ÿßŸÑÿ£ÿ≠ÿØ ÿßŸÑŸÇÿßÿØŸÖ`
    },
    {
        name: 'Test 3: List with actual newlines',
        input: `.ÿßÿ∂ÿßŸÅÿ©_ÿ±ÿØ ŸÜÿµ ÿ™ÿ±ÿ™Ÿäÿ® | üèÜ ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿØŸàÿ±Ÿä:

1. ÿßŸÑÿ£ŸáŸÑŸä - 45 ŸÜŸÇÿ∑ÿ©
2. ÿßŸÑÿ≤ŸÖÿßŸÑŸÉ - 43 ŸÜŸÇÿ∑ÿ©
3. ÿ®Ÿäÿ±ÿßŸÖŸäÿØÿ≤ - 38 ŸÜŸÇÿ∑ÿ©`,
        expectedText: `üèÜ ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿØŸàÿ±Ÿä:

1. ÿßŸÑÿ£ŸáŸÑŸä - 45 ŸÜŸÇÿ∑ÿ©
2. ÿßŸÑÿ≤ŸÖÿßŸÑŸÉ - 43 ŸÜŸÇÿ∑ÿ©
3. ÿ®Ÿäÿ±ÿßŸÖŸäÿØÿ≤ - 38 ŸÜŸÇÿ∑ÿ©`
    },
    {
        name: 'Test 4: Single line text (backward compatibility)',
        input: '.ÿßÿ∂ÿßŸÅÿ©_ÿ±ÿØ ŸÜÿµ ŸÖÿ±ÿ≠ÿ®ÿß | ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ! ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉÿü',
        expectedText: 'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ! ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉÿü'
    }
];

let passed = 0;
let failed = 0;

tests.forEach((test, index) => {
    console.log(`${test.name}`);
    console.log('Input command:');
    console.log('‚îÄ'.repeat(40));
    console.log(test.input);
    console.log('‚îÄ'.repeat(40));
    console.log('');
    
    const result = processAddResponseCommand(test.input);
    
    if (result.success && result.text === test.expectedText) {
        console.log('‚úÖ PASS - Newlines preserved correctly');
        console.log('Stored text:');
        console.log('‚îÄ'.repeat(40));
        console.log(result.text);
        console.log('‚îÄ'.repeat(40));
        passed++;
    } else if (result.error) {
        console.log('‚ùå FAIL - Processing error:', result.error);
        failed++;
    } else {
        console.log('‚ùå FAIL - Text not preserved correctly');
        console.log('Expected:');
        console.log(test.expectedText);
        console.log('\nGot:');
        console.log(result.text);
        failed++;
    }
    
    console.log('\n' + '='.repeat(60) + '\n');
});

console.log(`üìä Results: ${passed}/${tests.length} passed, ${failed}/${tests.length} failed\n`);

if (failed === 0) {
    console.log('üéâ All tests passed!\n');
    console.log('üí° Now users can type multi-line messages in WhatsApp and the newlines will be preserved automatically!\n');
    process.exit(0);
} else {
    console.log('‚ö†Ô∏è  Some tests failed!\n');
    process.exit(1);
}
